---
import DirectionSelect from "./controls/DirectionSelect.astro";
import DisplaySelect from "./controls/DisplaySelect.astro";
import OrderSelect from "./controls/OrderSelect.astro";
import PageNavButton from "./controls/PageNavButton.astro";

interface Props {
    displayFormat: string;
    order: string;
    dir: string;

    page: number;
    lastPage: number;
    pageSize: number;
}

const {displayFormat, order, dir, page, lastPage, pageSize} = Astro.props;

---
<nav class="search-controls">
    <div class="inner-flex">
        <div class="flex-row-start" data-display-options>
            <DisplaySelect name="as" value={displayFormat} />
            <OrderSelect name="order" value={order} />
            <DirectionSelect name="dir" value={dir} />
        </div>
        <div class="flex-row-start">
            <PageNavButton url={Astro.url} page={1} iconName="pagination/first-page" isActive={page > 1} />
            <PageNavButton url={Astro.url} page={page - 1} iconName="pagination/navigate-before" iconPos="left" label="Previous" isActive={page > 1} />
            <PageNavButton url={Astro.url} page={page + 1} iconName="pagination/navigate-next" iconPos="right" label={`Next ${pageSize}`} isActive={page < lastPage} />
            <PageNavButton url={Astro.url} page={lastPage} iconName="pagination/last-page" isActive={page < lastPage} />
        </div>
    </div>
</nav>

<script>
    //Scripts is only executed once, even if the component is included multiple times, so add once for all instances.
    document.querySelectorAll("[data-display-options]").forEach((container) => {
        const displaySelect = container.querySelector("[name=as]");
        displaySelect?.addEventListener("change", changeUrlParams);

        const orderSelect = container.querySelector("[name=order]");
        orderSelect?.addEventListener("change", changeUrlParams);

        const directionSelect = container.querySelector("[name=dir]");
        directionSelect?.addEventListener("change", changeUrlParams);
    });

    function changeUrlParams(this:HTMLSelectElement) {
        const urlParams = new URLSearchParams(window.location.search);
        urlParams.set(this.name, this.value);
        window.location.search = urlParams.toString();
    }
</script>

<style>
    .search-controls {
        padding: 12px 2.5%;
        background-color: #F6F4FA;
        background-color: #F3F5F8;
        border-bottom: 1px solid rgba(99,68,150,0.1);
    }

    .search-controls .inner-flex {
        flex-flow: row nowrap;
        justify-content: space-between;
        align-items: center;
    }
</style>