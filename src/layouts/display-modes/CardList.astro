---
import ColorIndicator from '@components/ColorIndicator.astro';
import type ListCardModel from 'src/models/ListCardModel'

interface Props {
    cards: ListCardModel[]
}

const { cards } = Astro.props;

const cardTypes: Record<string,string> = {
    "Character": "CH",
    "Event": "EV",
    "Climax": "CX"
};

---
<div class="flex-list-wrapper">
    <table class="card-list">
        <thead>
            <tr>
                <th>Card No.</th>
                <th>Name</th>
                <th class="center">Type</th>
                <th class="center"><abbr title="Color">CL</abbr></th>
                <th class="center"><abbr title="Level/Cost">LV/C</abbr></th>
                <th class="center">Rarity</th>
                <th>Set</th>
            </tr>
        </thead>
        <tbody>
            {/* TODO make this thing keyboard accessible with tabbing. */}
            {cards.map((card) => 
                <tr data-card-image={card.image} 
                    data-card-type={card.type}
                    data-card-id={card.id}>
                    <td>
                        <a href={"/card/" + card.id} tabindex="-1">{card.cardno}</a>
                    </td>
                    <td>
                        <a href={"/card/" + card.id}>{card.name}</a>
                    </td>
                    <td class="center">
                        <a href={"/card/" + card.id} tabindex="-1">
                            <abbr title={card.type}>{ cardTypes[card.type] }</abbr>
                        </a>
                    </td>
                    <td class="center">
                        <a href={"/card/" + card.id} tabindex="-1">
                            <abbr title={card.colorName}><ColorIndicator color={card.color} /></abbr>
                        </a>
                    </td>
                    <td class="center">
                        <a href={"/card/" + card.id} tabindex="-1">
                            {card.level && `${card.level}/${card.cost}` }
                        </a>
                    </td>
                    <td class="center">
                        <a href={"/card/" + card.id} tabindex="-1">
                            <abbr title={card.rarityName}>{card.rarity}</abbr>
                        </a>
                    </td>
                    <td>
                        <a href={"/card/" + card.id} tabindex="-1">{card.setName}</a>
                    </td>
                </tr>
            )}
        </tbody>
    </table>
</div>
<div id="card-preview-container" aria-hidden="true"></div>

<script>

    const previewContainer = document.getElementById("card-preview-container");
    const cardRows = document.querySelectorAll("[data-card-image]");
    cardRows.forEach((el) => {
        const tr = el as HTMLTableRowElement;
        const cardImage = tr.dataset.cardImage ?? "";
        const cardType = tr.dataset.cardType ?? "";
        const cardId = tr.dataset.cardId ?? ""; //needed to check if the card is a different. But can we check for the image being the same instead?
        tr.addEventListener("mousemove", (e) => updatePreviewPosition(e, cardId, cardImage, (cardType == "Climax")));
        tr.addEventListener("mouseout", hidePreview);
    });
    
    function updatePreviewPosition(e:MouseEvent, cardId: string, cardImage: string, isRotated: boolean) {
        if (window.innerWidth < 768 || !previewContainer)
            return false;
    
        if(previewContainer.style.display != "flex") {
            previewContainer.style.display = "flex";
        }
        
        previewContainer.style.left = e.pageX + 50 + "px";
        previewContainer.style.top = e.pageY - 30 + "px";
    
        if(cardId !== previewContainer.dataset.cardId) {
            var previewImage = document.createElement("img");
            previewImage.src = cardImage;
            previewImage.alt = cardId;

            previewContainer.dataset.cardId = cardId;
            previewContainer.replaceChildren(previewImage);
            previewContainer.classList.toggle("rotated", isRotated);
        }
    
    }
    
    function hidePreview() {
        if(previewContainer) {
            previewContainer.style.display = "none";
        }
    }
    
</script>

<style>

    .card-list {
        font-size: 14px;
        width: 100%;
        min-width: 768px;
        max-width: 1000px;
        line-height: 20px;
        margin: 20px 0 20px 0;
        /*table-layout: fixed;*/
        border-collapse: collapse;
    }
    
    tr {
        border-bottom: 1px solid #E0DEE3;
        cursor: pointer;
        border-left: 2px solid transparent;
    }

    tbody tr:hover {
        background-color: #eee;
    }

    tr:nth-child(even) {
        background-color: rgba(0,0,0,0.05);

        &:hover {
            background-color: rgba(101,82,0,0.075);
        }
    }

    /* header */
    th {
        padding: 5px 0 5px 6px;
    }

    th, th * {
        text-align: left;
        font-weight: bold;
        font-size: 12px;
        text-transform: uppercase;
        white-space: nowrap;
    }

    /* cells */
    td {
        padding: 5px;
        overflow: hidden; /* prevent big links from spilling */
    }

    .center {
        text-align: center;
    }

    td a {
        /* make empty cell links clickable */
        display: block;
        margin: -10em;
        padding: 10em;

        color: #16161D;
        outline: none;
    }

    /* preview */
    #card-preview-container {
        display: none;
        pointer-events: none;
        position: absolute;
        z-index: 100000;
        background-image: repeating-linear-gradient(-55deg, #DDD, #DDD 5px, #CCC 5px, #CCC 10px);
        border-radius: 4.75% / 3.5%;
        height: 340px;
        width: 244px;
        flex-flow: row nowrap;

        &.rotated {
            transform: rotate(-90deg);
        }
    }

    #card-preview-container img {
        max-width: 244px;
        max-height: 340px;
        background-image: none;
    }
</style>