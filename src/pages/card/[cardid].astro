---
import MainLayout from '@layouts/MainLayout.astro';
import SearchHeader from '@layouts/SearchHeader.astro';

import { db, eq, Card, Set } from 'astro:db';
import { toPascal } from 'src/scripts/utils';
import { dbarray } from 'src/scripts/db-utils';
import { getTriggerInfo } from '@scripts/trigger';
import { Icon } from 'astro-icon/components';
import TraitBox from '@components/TraitBox.astro';
import ColorIndicator from '@components/ColorIndicator.astro';
import AbilityText from '@components/AbilityText.astro';

const { cardid = "" } = Astro.params;
console.log(cardid);

const selectCardResult = await db.select().from(Card)
    .innerJoin(Set, eq(Card.setId, Set.id))
    .where(eq(Card.id, cardid))
    .get();

if(!selectCardResult) {
    return new Response(null, {
        status: 404,
        statusText: 'Not found'
    });
}

const card = selectCardResult.Card;
const set = selectCardResult.Set;

const soulTrigger = getTriggerInfo(["soul"])[0];

---
{/* CX imagages are upright by default, by the same image with (H) appended from ws-tcg is horizontal.

When formatting ability text, do the following:
- make traits have a link to a search that searches for all characters with that trait.
- Make keywords (Alarm, Brainstorm, Great Performance...) bold.
- Format cont/auto/act as boxes

*/}
<MainLayout>
    <SearchHeader />
    <main>
        <div class="card-details">
            <div class="inner-flex">
                {/* climax are rotated by default */}
                <figure id="main-image-container" class:list={["card-image", {rotated: (card.type == "Climax")}]}>
                    <img class="card" src={card.image} alt={card.name} loading="eager" />
                </figure>
                <div class="card-actions">
                    { (card.type == "Climax") && 
                        <button id="rotate-button" type="button" class="button" title="Rotate Card" 
                            data-target="main-image-container" data-rotation-class="rotated">
                            <Icon name="rotate" />
                            <b>Rotate</b>
                        </button> 
                    }
                </div>

                {/* Card Text */}
                <article class:list={["card-text", card.color.toLowerCase()]}>
                    <header class="card-header">
                        <h1 class="card-name">{card.name}</h1>
                        <div class="card-icons">
                            <span>
                                { dbarray(card.icons).map((icon) => 
                                    <img src={`/images/${icon.toLowerCase()}.webp`} title={toPascal(icon)} alt={toPascal(icon)} />
                                )}
                            </span>
                            <span>
                                { getTriggerInfo(dbarray(card.trigger)).map((trigger) => 
                                    <img src={trigger.image} title={trigger.name} alt={trigger.name} />
                                )}
                            </span>
                        </div>
                    </header>
                    <div class="card-subheader">
                        <span class="card-number">{card.cardno}</span>
                        <span class="card-rarity">{card.rarity}</span> &mdash;
                        <a class="set-name" href={`/sets/${set.id}`}>{set.name}</a>
                    </div>
                    <div class="type-line">
                        <ColorIndicator color={card.color} />
                        <span class="card-type">{card.type}</span>
                    </div>
                    <div class="abilities">
                        { dbarray(card.abilities).map((abil) => <AbilityText>{abil}</AbilityText> )}
                    </div>
                    { card.flavor && 
                        <div class="flavor">
                            <p aria-label="Flavor Text">{card.flavor}</p>
                        </div>
                    }

                    <footer class="card-footer">
                        <div class="card-stats">
                            { card.level !== null && card.cost !== null &&
                                <div title={`Level ${card.level}, Cost ${card.cost}`}>
                                    {/* Maybe the icon should be a blank version of the "Level" circle on WS cards? Or a simplified version. */}
                                    <img class="stat-icon" src="/images/level.webp" alt="level" />
                                    <span class="stat-number" aria-label="Level/Cost">{card.level}/{card.cost}</span>
                                </div> 
                            }
                            { card.power !== null &&
                                <div title={card.power + " Power"}>
                                    <Icon class="stat-icon" name="sword" /> 
                                    <span class="stat-number" aria-label="Power" >{card.power}</span> 
                                </div>
                            }
                            { card.soul !== null &&
                                <div title={card.soul + " Soul"}>
                                    <img class="stat-icon" src={soulTrigger.image} alt={soulTrigger.name} />
                                    <span class="stat-number" aria-label="Soul">{card.soul}</span>
                                </div>
                            }
                        </div>
                        <div class="card-traits">
                            { dbarray(card.traits).map((trait) => <TraitBox>{trait}</TraitBox>) }
                        </div>
                    </footer>
                </article>
            </div>
        </div>
    </main>
</MainLayout>

<script>
    const rotateButton = document.getElementById("rotate-button");
    rotateButton?.addEventListener("click", (e) => {
        const btn = e.currentTarget as HTMLButtonElement;
        const target = document.getElementById(btn.dataset.target ?? "");
        console.log("Target:", target);
        target?.classList.toggle(btn.dataset.rotationClass ?? "");
    });
</script>

<style>
    .card-details {
        padding: 15px 2.5%;
        background-color: #F5F6FA;
        border-bottom: 1px dashed #CDCDCD;
        perspective: 2000px;
    }

    .inner-flex {
        position: relative;
    }

    .card-image {
        border-radius: 100%;
        margin: 0 auto 15px;
        overflow: visible;
        /*padding-bottom: 139%;*/
        position: relative;
        z-index: 10000;
        height: 400px;
        width: 300px;

        & .card {
            width: 100%;
            box-shadow: 1px 1px 8px rgba(0,0,0,0.5);
            transition: transform 350ms;
        }
    }

    .card-image.rotated .card {
        transform: rotate(-90deg) scale(0.75);
    }

    .card-actions {
        display: flex;
        justify-content: center;
        width: 100%;
        flex-flow: row nowrap;
    }

    .card-text {
        display: block;
        border: 1px solid rgba(0,0,0,0.25);
        border-top: 3px solid black;
        border-bottom: 5px solid black;
        border-radius: 4px;
        background: #fff;
        margin: 15px auto 0 auto;
        max-width: 500px;
        padding: 0 0 15px 0;
        font-size: 16px;
        color: #16161D;
        width: 100%;
    }

    .card-header {
        font-weight: bold;
        padding: 8px 12px 8px 12px; /*trbl*/
        border-bottom: 1px solid rgba(0,0,0,0.1);
        line-height: 20px;
        font-size: 16px;
        display: flex;
        flex-flow: row wrap;
        justify-content: space-between;
        align-items: center;
    }

    .card-name {
        margin: 0;
    }

    .card-icons {
        & span { margin-left: .5em; }
        & img { height: 32px; }
    }

    .card-subheader {
        color: #585858;
        padding: 5px 12px;
        border-bottom: 1px solid rgba(0,0,0,0.1);
    }

    .type-line {
        display: flex;
        flex-flow: row nowrap;
        align-items: center;
        padding: 5px 12px;
        border-bottom: 1px solid rgba(0,0,0,0.1);
    }

    .card-type {
        margin-left: 7px;
    }

    .card-level-cost {
        margin-left: 10px;
        padding: 2px 10px;
        font-size: 1.1em;
        background-color: #eee;
        border-radius: .3em;
    }

    .abilities {
        padding: 0 12px;
        border-bottom: 1px solid rgba(0,0,0,0.1);
    }

    .flavor {
        padding: 5px 12px;
        color:#585858;
        font-style: italic;
        border-bottom: 1px solid rgba(0,0,0,0.1);
    }

    .card-footer {
        padding: 5px 12px 0 12px;
        display: flex;
        flex-flow: row wrap;
        align-items: center;
        justify-content: space-between;

        /* traits */
        & .card-traits > span {
            margin-right: .3em;
        }

        /* power/soul boxes */
        & .card-stats > div {
            display: inline-flex;
            flex-flow: row nowrap;
            align-items: center;

            margin-right: .3em;
            padding: 5px;
            border-radius: .3em;
            background-color: #eee;
        }
    }

    /* icon scales with font-size, img with height */
    .stat-icon {
        font-size: 24px;
        height: 24px;
        margin-right: 3px;
    }

    .stat-number {
        font-size: 1.1em;
    }

    @media screen and (min-width: 350px) {
        .card-image {
            padding-bottom: 0;
            height: 468px;
            width: 336px;
        }
    }

    @media screen and (min-width: 720px) {
        .inner-flex {
            flex-flow: row wrap;
            justify-content: center;
        }

        .card-image {
            flex: 0 0 336px;
        }

        .card-text {
            margin: 15px 15px 0 0;
            flex-grow: 1;
            width: auto;
        }
    }

    @media screen and (min-width: 980px) {
        .card-details {
            padding: 20px 2.5% 64px 2.5%;
            perspective: 1000px;
        }

        .inner-flex {
            justify-content: flex-start;
        }

        .card-image {
            margin: 0;
            flex: 0 0 336px;
        }

        .card-image.rotated .card:hover {
            transform: rotate(-90deg) scale(1) translateY(50px);
        }

        .card-actions {
            left: 0;
            position: absolute;
            top: 484px;
            width: 336px;
        }

        .card-text {
            width: 36.5%;
            margin: 20px;
            /*margin: 20px 0 -25px -15px; /* this moves the box inside the img */
            z-index: 1;
        }
    } 
</style>