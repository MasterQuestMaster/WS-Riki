---
import MainLayout from '@layouts/MainLayout.astro';
import SearchHeader from '@layouts/SearchHeader.astro';

import { db, eq, Card, Set } from 'astro:db';
import { dbarray } from 'src/scripts/db-utils';
import { getTriggerInfo } from '@scripts/trigger';
import { Icon } from 'astro-icon/components';

const { cardid = "" } = Astro.params;
console.log(cardid);

const selectCardResult = await db.select().from(Card)
    .innerJoin(Set, eq(Card.setId, Set.id))
    .where(eq(Card.id, cardid))
    .get();

if(!selectCardResult) {
    return new Response(null, {
        status: 404,
        statusText: 'Not found'
    });
}

const card = selectCardResult.Card;
const set = selectCardResult.Set;

---
<!-- CX imagages are upright by default, by the same image with (H) appended from ws-tcg is horizontal.
-->
<MainLayout>
    <SearchHeader />
    <main>
        <article class="card-details">
            <div class="inner-flex">
                <!-- climax are rotated by default -->
                <section id="main-image-container" class:list={
                    ["card-image", {rotated: (card.type == "Climax")}]
                }>
                    <img class="card" src={card.image} alt={card.name} loading="eager" />
                </section>
                <section class="card-actions">
                    <button id="rotate-button" type="button" class="button" title="Rotate Card"
                        data-target="main-image-container" data-rotation-class="rotated">
                        <Icon name="rotate" />
                        <b>Rotate</b>
                    </button>
                </section>
                <section class="card-text">
                    <div class="card-header">
                        <h1 class="card-name">{card.name}</h1>
                        <span class="card-triggers">
                        {
                            getTriggerInfo(...dbarray(card.trigger)).map((trigger) => 
                                <img class="trigger-image" src={trigger.image} alt={trigger.name} />
                            )
                        }
                        </span>
                    </div>
                    <div class="card-subheader">
                        <span class="card-number">{card.cardno}</span> &mdash;
                        <span class="card-rarity">{card.rarity}</span> &mdash;
                        <span class="set-name">{set.name}</span>
                    </div>
                    <p class="card-type">{card.type}</p>
                    <div class="card-traits">
                    { dbarray(card.traits).map((trait) => 
                        <span class="trait">{trait}</span>
                    )}
                    </div>
                    <div class="abilities">
                    <!-- TODO: Replace text with symbols (html svg, or maybe a symbol font) -->
                    { dbarray(card.abilities).map((abil) => 
                        <p>
                            {abil}
                        </p>
                    )}
                    </div>
                    <div class="flavor">{card.flavor}</div>
                </section>
            </div>
        </article>
        <div class="card">
            <p>Code: {card.cardno}</p>
            <p>Card Name: {card.name}</p>
            <p>Type: {card.type}</p>
            <p>Color: {card.color}</p>
            <p>Rarity: {card.rarity}</p>
            <p>Expansion: {set.name}</p>
            <p>Level: {card.level}</p>
            <p>Cost: {card.cost}</p>
            <p>Power: {card.power}</p>
            <p>Soul: {card.soul}</p>
            <p>
                Trigger: {dbarray(card.trigger).map(trigger => 
                <div class="trigger-icon">{trigger}</div>)}
            </p>
            <p>
                Traits: {dbarray(card.traits).map(trait => 
                <div class="trait">{trait}</div>)}
            </p>
            <p>Abilities ({dbarray(card.abilities).length}): {dbarray(card.abilities).join("\n")}</p>
            <p>Tags: {dbarray(card.tags).map(tag =>
                <div class="tag">{tag}</div>)}
            </p>
            <img src={card.image} alt={card.name} />
        </div>
    </main>
</MainLayout>

<script>
    const rotateButton = document.getElementById("rotate-button");
    rotateButton?.addEventListener("click", (e) => {
        const btn = e.currentTarget as HTMLButtonElement;
        const target = document.getElementById(btn.dataset.target ?? "");
        console.log("Target:", target);
        target?.classList.toggle(btn.dataset.rotationClass ?? "");
    });
</script>

<style>
    .card-details {
        padding: 15px 2.5%;
        background-color: #F5F6FA;
        border-bottom: 1px dashed #CDCDCD;
        perspective: 2000px;
    }

    .inner-flex {
        position: relative;
    }

    .card-image {
        border-radius: 100%;
        margin: 0 auto 15px;
        overflow: visible;
        /*padding-bottom: 139%;*/
        position: relative;
        z-index: 10000;
        height: 400px;
        width: 300px;

        & .card {
            width: 100%;
            box-shadow: 1px 1px 8px rgba(0,0,0,0.5);
            transition: transform 350ms;
        }
    }

    .card-image.rotated .card {
        transform: rotate(-90deg) scale(0.75);
    }

    .card-actions {
        display: flex;
        justify-content: center;
        width: 100%;
        flex-flow: row nowrap;
    }

    .card-text {
        display: block;
        border: 1px solid rgba(0,0,0,0.25);
        border-top: 3px solid black;
        border-bottom: 3px solid black;
        border-radius: 4px;
        background: #fff;
        margin: 15px auto 0 auto;
        max-width: 500px;
        padding: 0 0 15px 0;
        font-size: 16px;
        color: #16161D;
        width: 100%;
    }

    .card-header {
        font-weight: bold;
        padding: 8px 12px 8px 12px;
        border-bottom: 1px solid rgba(0,0,0,0.1);
        line-height: 20px;
        font-size: 16px;
        display: flex;
        flex-flow: row wrap;
        justify-content: space-between;
        align-items: center;
    }

    .card-name {
        margin: 0;
    }

    .trigger-image {
        height: 2em;
    }

    .card-subheader {
        color: #585858;
    }

    .flavor {
        color:#585858;
        font-style: italic;
    }

    @media screen and (min-width: 350px) {
        .card-image {
            padding-bottom: 0;
            height: 468px;
            width: 336px;
        }
    }

    @media screen and (min-width: 720px) {
        .inner-flex {
            flex-flow: row wrap;
            justify-content: center;
        }

        .card-image {
            flex: 0 0 336px;
        }

        .card-text {
            margin: 15px 15px 0 0;
            flex-grow: 1;
            width: auto;
        }
    }

    @media screen and (min-width: 980px) {
        .card-details {
            padding: 20px 2.5% 64px 2.5%;
            perspective: 1000px;
        }

        .inner-flex {
            justify-content: flex-start;
        }

        .card-image {
            margin: 0;
            flex: 0 0 336px;
        }

        .card-actions {
            left: 0;
            position: absolute;
            top: 484px;
            width: 336px;
        }

        .card-text {
            width: 36.5%;
            margin: 20px;
            /*margin: 20px 0 -25px -15px; /* this moves the box inside the img */
            z-index: 1;
        }

        .card-header {
            padding: 9px 12px 8px 12px;
        }
    } 
</style>