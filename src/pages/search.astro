---
import MainLayout from "@layouts/MainLayout.astro";
import SearchHeader from "@layouts/SearchHeader.astro";
import CardImageTile from "@components/CardImageTile.astro";
import CardDetailRow from "@components/CardDetailRow.astro";
import CardGrid from "@components/CardGrid.astro";
import type GridCardModel from "src/models/GridCardModel";

import { db, Card, Set, eq } from 'astro:db';
import { QueryParser, type IKeywordOptions as QueryKeywordOptions } from "@scripts/parser/queryParser";
import { DrizzleParser, type IKeywordOptions as DrizzleKeywordOptions } from "@scripts/parser/drizzleParser";
import { stringifyLogicTree, getSingleToken } from "@scripts/parser/logicGroup";
import { stringifySearchToken, objectMap } from "@scripts/utils";
import { getColumnFromString } from "@scripts/db-utils";

import parserConfig from "src/config/parser-config.json";
import displayConfig from "src/config/display-config.json";


const query = Astro.url.searchParams.get("q");

//Perform a runtime check for the default value, since TS convert is only compile time.
let displayFormat = Astro.url.searchParams.get("as")?.toLowerCase() as keyof typeof displayConfig ?? "";
if(!Object.hasOwn(displayConfig, displayFormat)) {
    displayFormat = "image";
}

//Parse the query into a LogicTree that can be processed further.
const parser = new QueryParser(parserConfig.keywords as QueryKeywordOptions);
//TODO: Show errors as error message below search bar on result page.
let tree = parser.parse(query);
console.log(stringifyLogicTree(tree, stringifySearchToken));


//Parse the Logic Tree from the Query Parser into a Drizzle "Where" clause.
const drizzleConfig = parserConfig.keywords as DrizzleKeywordOptions;
const drizzleParser = new DrizzleParser(drizzleConfig);
//TODO: error handling for the possible exceptions here.
const drizzleFilterParams =  drizzleParser.parseLogicTree(tree);

//Check if a search for only a single set was made. If so, redirect to /sets/...
const singleToken = getSingleToken(tree);
if(singleToken?.type == "expression" && singleToken.keyword == "set") {
    //check if exactly 1 set that fits the criteria exists.
    const setResults = await db.select({id: Set.id}).from(Set).where(drizzleFilterParams);

    if(setResults.length == 1) {
        const setid = setResults[0].id;
        return Astro.redirect(`/sets/${encodeURIComponent(setid)}?as=${encodeURIComponent(displayFormat)}`);
    }
}

//Check if we have any keywords that require joining of the "Set" table.
// const usedSetKeywords = Object.keys(drizzleConfig).filter((key) => {
//     const dbCol = drizzleConfig[key].dbColumn;
//     const isSetKeyword = Array.isArray(dbCol) ? dbCol.find(c=>c.startsWith("Set")) : dbCol.startsWith("Set");
//     return isSetKeyword && drizzleParser.statistics.keywordUsage[key];
// });

//IMPORTANT: The result structure changes if we include a join.
//It becomes {Card:{id,name,...},Set:{id,name,...}}.
//We can avoid this by specifying all the columns in the Select.

//"any" type is necessary because SelectedFields type is not compatible.
//TODO: Maybe get rid of displayconfig since we join set always and we can't use CardModel then?
const currentDisplayConfig = displayConfig[displayFormat];
const selectColumns = objectMap<string,any>(currentDisplayConfig.select, getColumnFromString);

//Always join Set unless we find out it impacts performance.
let dbQuery = db.select(selectColumns)
    .from(Card)
    .innerJoin(Set, eq(Set.id, Card.setId));

//If the Set table is in the WHERE or in the SELECT, join it.
// if(usedSetKeywords.length > 0 || currentDisplayConfig.join?.includes("Set")) {
//     dbQuery.innerJoin(Set, eq(Set.id, Card.setId));
// }

const results = await dbQuery.where(drizzleFilterParams);
console.log("Results:" + JSON.stringify(results));
console.log(dbQuery.toSQL());

//Redirect directly to the card detail page if only 1 result is found.
if(results.length == 1) {
    const cardid = results[0].id;
    return Astro.redirect(`/card/${encodeURIComponent(cardid)}`);
}

---
<MainLayout title={query}>
    <SearchHeader searchText={query} />
    <p>{results.length} results found.</p>
    <pre>{ stringifyLogicTree(tree, stringifySearchToken) }</pre>
    <pre>{ dbQuery.toSQL().sql }</pre>
    <main>
        <!-- TODO: Extract the surrounding markup into own component as well based on format. -->
        {displayFormat == "image" && <CardGrid cards={results as GridCardModel[]} />}
        {displayFormat == "list" && 
        <table>
            <thead>
                <tr>
                    <th>Card No.</th>
                    <th>Name</th>
                    <th>Type</th>
                    <th>Color</th>
                    <th>LV/C</th>
                    <th>Rarity</th>
                    <th>Set</th>
                </tr>
            </thead>
            { results.map( (card) => <CardDetailRow card={card} /> ) }
        </table>
        }
    </main>
    
    <!-- TODO: Show a default page if no cards were found. -->
</MainLayout>