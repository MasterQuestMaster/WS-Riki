---
import MainLayout from "@layouts/MainLayout.astro";
import SearchHeader from "@layouts/SearchHeader.astro";
import FormRow from "@layouts/FormRow.astro";

import NumberOperator from "@components/controls/NumberOperator.astro";
import ToggleSwitch from "@components/controls/ToggleSwitch.astro";

import { db, Card, Set } from "astro:db";

import { getDistinctArrayColValues } from "src/scripts/db-utils";

//If any post data exists, we convert the post data to a query string. Then we redirect to /search with that string.

if(Astro.request.method === "POST") {
    const data = await Astro.request.formData();

    console.log("Form Data");
    
    /* 
        TODO: Some cards should have multiple values that should be ORd, like
        trigger, rarity, expansion.
        Trait should have an option any/all.

        For the level/cost/power/soul, we should have a range option with 2 sides.

        For name and ability we should split the values (but keep quotes strings).
        For name just search without keyword.
    */

    const queryArray = Array.from(data)
        .filter(([key, val]) => val.toString().trim() && !key.endsWith("-op") )
        .map(([key,val]) => {
            if(key == "name" || key == "ability") {
                //split into freetext words and quoted parts.
                const wordPattern = /((?<qt>["']).*?[^\\](\k<qt>|$)|[^\s]+)/g;
                //if g flag is used, the return value is a string[] with the matches.
                let entries = val.toString().match(wordPattern) as (string[]|null);

                if(key == "ability") {
                    //append the keyword and group the entries.
                    const withKeyword = entries?.map((entry) => `ability:${entry}`);
                    return `(${withKeyword?.join(" ")})`;
                }

                return entries?.join(" ");
            }
            else if(key == "trigger" || key == "rarity" || key == "set" || key == "trait") {
                //TODO: We can only parse this once we know the form that
                //the triggers/rarities are going to take with a multi-value select.
                return `${key}:${val}`;
            }
            else {
                return `${key}${data.get(key+"-op") ?? ":"}${val}`;
            }
        });

    console.log(queryArray);
    
    const query = queryArray.join(" ");
    return Astro.redirect("/search?q=" + encodeURIComponent(query));

    // data.forEach((value, key) => {
    //     console.log(key, value);
    // });

    //console.log(data.getAll("icon"));
}

//Load expansions
const sets = await db.select().from(Set);

const traits = await getDistinctArrayColValues(Card.traits);
console.log(traits);

const tags = await getDistinctArrayColValues(Card.tags);
console.log(tags);

---

<MainLayout title="Advanced Search">
    <SearchHeader />
    <main>
        <h1 class="visually-hidden">Advanced Search</h1>

        <form id="advanced-search-form" method="post">
            <div class="inner-flex">
                <FormRow label="Name" _for="search-name">
                    <input name="name" id="search-name" type="text" autocorrect="off" spellcheck="false"
                        placeholder='Any words in the name, e.g. "Akane"' />
                </FormRow>
                <FormRow label="Ability" _for="search-ability">
                    <input name="ability" id="search-ability" type="text" autocorrect="off" spellcheck="false"
                        placeholder='Any card text, e.g. "When this card attacks"' />
                </FormRow>
                
                <FormRow label="Card No." _for="search-cardno">
                    <input name="cardno" id="search-cardno" type="text" autocorrect="off" spellcheck="false"
                        placeholder='Card number, e.g. "SPY/S106-E001"' />
                </FormRow>
                <FormRow label="Type" _for="search-type">
                    <select name="type" id="search-type" multiple>
                        <option value="">Choose a type...</option>
                        <option value="Character">Character</option>
                        <option value="Event">Event</option>
                        <option value="Climax">Climax</option>
                    </select>
                </FormRow>
                <FormRow label="Color" _for="search-color">
                    <select name="color" id="search-color" multiple>
                        <option value="">Choose a color...</option>
                        <option value="RED">Red</option>
                        <option value="GREEN">Green</option>
                        <option value="BLUE">Blue</option>
                        <option value="YELLOW">Yellow</option>
                        <!-- <option>Purple</option> -->
                    </select>
                </FormRow>
                <FormRow label="Rarity" _for="search-rarity">
                    <select name="rarity" id="search-rarity" multiple>
                        <option value="">Choose a rarity...</option>
                        <option value="C">Common</option>
                        <option value="U">Uncommon</option>
                        <option value="R">Rare</option>
                        <option value="RR">Double Rare</option>
                        <option value="RR+">Double Rare+ </option>
                        <option value="SR">Super Rare</option>
                        <option value="RRR">Triple Rare</option>
                        <option value="OFR">Overframe Rare</option>
                        <option value="SP">Special</option>
                        <option value="SSP">Super Special Rare</option>
                        <option value="SEC">Secret Rare</option>
                        <option value="TD">Trial Deck</option>
                        <option value="PR">Promo Rare</option>
                        <option value="CC">Climax Common</option>
                        <option value="CR">Climax Rare</option>
                    </select>
                </FormRow>
                <FormRow label="Expansion" _for="search-set">
                    <select name="set" id="search-set" multiple>
                        <option value="">Choose an expansion...</option>
                        {sets.map((set) =>
                            <option value={set.id}>{set.name} ({set.id})</option>
                        )}
                    </select>
                </FormRow>
                <FormRow label="Level" _for="search-level">
                    <NumberOperator name="level-op" id="search-level-op" label="Level Operator" />
                    <input name="level" id="search-power" type="number" min="0" max="3" placeholder="(0-3)" />
                </FormRow>
                <FormRow label="Cost" _for="search-cost">
                    <NumberOperator name="cost-op" id="search-cost-op" label="Cost Operator" />
                    <input name="cost" id="search-cost" type="number" min="0" max="9" placeholder="(0-9)" />
                </FormRow>
                <FormRow label="Power" _for="search-power">
                    <NumberOperator name="power-op" id="search-power-op" label="Power Operator" />
                    <input name="power" id="search-power" type="number" min="0" max="20000" step="500" placeholder="500"/>
                </FormRow>
                <FormRow label="Soul" _for="search-soul">
                    <NumberOperator name="soul-op" id="search-soul-op" label="Soul Operator" />
                    <input name="soul" id="search-soul" type="number" min="0" max="3" placeholder="(0-3)" />
                </FormRow>
                <FormRow label="Trigger" _for="search-trigger">
                    <select name="trigger" id="search-trigger" multiple></select>
                </FormRow>
                <FormRow label="Trait" _for="search-trait">
                    <select name="traits" id="search-trait" multiple>
                        <option value="">Choose a trait...</option>
                        {traits.map((tr) =>
                            <option>{tr.value}</option>
                        )}
                    </select>
                    <div class="toggle-switch">
                        <ToggleSwitch id="trait-toggle" name="traits-op" labelLeft="Any" labelRight="All" color="#a00" value="all"  />
                    </div>
                </FormRow>
                <FormRow label="Tag" _for="search-tag">
                    <select name="tag" id="search-tag" multiple>
                        <option value="">Choose a tag...</option>
                        {tags.map((tg) =>
                            <option>{tg.value}</option>
                        )}
                    </select>
                </FormRow>
                <FormRow label="Icon">
                    <fieldset>
                        <legend class="visually-hidden">Icons</legend>
                        <div>
                            <label>
                                <input name="icon" value="counter" type="checkbox" />
                                <img class="game-icon" src="images/backup.webp" alt="Counter Symbol" />
                                Counter
                            </label>
                
                            <label>
                                <input name="icon" value="clock" type="checkbox" />
                                <img class="game-icon" src="images/clock.webp" alt="Clock Symbol" />
                                Clock
                            </label>
                        </div>
                    </fieldset>
                </FormRow>
                <FormRow label="Preferences">
                    <label class="visually-hidden">Display</label>
                    <select name="as" id="display-as">
                        <option value="image">Display as images</option>
                        <option value="list">Display as list</option>
                    </select>
                    <select name="order" id="display-order">
                        <option value="name">Sort by Name</option>
                        <option value="date">Sort by Release Date</option> <!-- release date of set -->
                        <option value="set">Sort by Set/Number</option> <!-- this requires adding the set-nr and the card-nr as separate columns --> 
                        <option value="rarity">Sort by Rarity</option> <!-- this requires defining what the order is -->
                        <option value="color">Sort by Color</option> <!-- color order like official sets -->
                        <option value="level">Sort by Level</option>
                        <option value="cost">Sort by Cost</option>
                        <option value="power">Sort by Power</option>
                    </select>
                </FormRow>
                <FormRow label="" sticky>
                    <input class="search-btn" type="submit" value="Search with these options" />
                </FormRow>
                </div>
            </div>
        </form>
    </main>

</MainLayout>

<script>
    //You can import both the npm library and its css on the client like this:
    import TomSelect from "tom-select";
    import "tom-select/dist/css/tom-select.default.css";
    //get the current scope to apply it on the dynamically created objects.
    import scope from "astro:scope"; 

    import { getAllTriggerInfos, type TriggerInfo } from "@scripts/trigger";

    new TomSelect("#search-type", {});
    new TomSelect("#search-color", {});
    new TomSelect("#search-rarity", {});
    new TomSelect("#search-set", {});
    new TomSelect("#search-trait", {});
    new TomSelect("#search-tag", {});

    new TomSelect("#search-trigger", {
        valueField: "id",
        searchField: ["name"],
        options: getAllTriggerInfos(),
        placeholder: "Choose a trigger...",
        render: {
            option: renderTriggerOption,
            item: renderTriggerOption
        }
    });

    //TODO: Try to do this with a template tag. That can use Astro Components, and it has better highlighting, and we probably don't need scope.
    //We read the content from the HTML element when we start the client-side script.
    //We should also use our trigger-icon component then. We don't need the image links or the name then, just the ID.
    //TODO: We still need name for span, so might need to import config here as well?

    function renderTriggerOption(data:TriggerInfo, escape: (txt:string)=>string) {
        return `<div>
                    <img class="trigger-image" data-astro-cid-${scope} src="${escape(data.image)}" alt="${escape(data.id)}" />
                    <span class="trigger-name" data-astro-cid-${scope}>${escape(data.name)}</span>
                </div>`;
    }

</script>

<style is:global>
    /* TOM Select (global cause they don't have the scope) */
    #advanced-search-form {
        & .ts-dropdown, .ts-control, .ts-control input {
            font-size: 16px;
        }
    }
</style>

<style>
    /* form inputs */
    input[type="text"], input[type="number"], select {
        background-color: #FEFEFE;
        border-radius: 2px;
        border: 1px solid #AEAEAE;
        color: #343242;
        font-size: 16px;
        line-height: 20px;
        padding: 8px 10px;
    }

    .content {
        & input[type="text"], input[type="number"], select {
            flex-grow: 1;
            margin: 0 5px 0 0;
            max-width: 100%;
        }
    }

    @media screen and (min-width: 740px) {
        .content {
            & input[type="text"], input[type="number"], select {
                max-width: 420px;
            }
        } 
    }

    .toggle-switch {
        margin: 5px 0 5px 0;
    }

    .search-btn {
        font-size: 15px;
        padding: 0 12px;
        height: 36px;
        margin: 18px 0 0 0 ;
    }

    /* icons */

    .trigger-image {
        height: 2em;
    }

    .game-icon {
        height: 2em;
    }
</style>