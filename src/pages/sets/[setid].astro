---
import MainLayout from '@layouts/MainLayout.astro';
import SearchHeader from '@layouts/SearchHeader.astro';
import CardGrid from "@layouts/display-modes/CardGrid.astro";
import CardList from "@layouts/display-modes/CardList.astro";
import DisplayOptions from '@components/header/DisplayOptions.astro';

import type GridCardModel from 'src/models/GridCardModel';
import type ListCardModel from 'src/models/ListCardModel';
import { CardOrderSchema, DisplayFormatSchema, SortDirectionSchema } from 'src/schemas/SearchParams';

import { db, eq, Card, Set, Rarity, Color } from 'astro:db';
import { getOrderConfig } from '@scripts/db-utils';
import { formatDate } from '@scripts/utils';

import orderConfig from "src/config/order-config.json";


//URL Parameters
const order = CardOrderSchema.catch("rarity").parse(Astro.url.searchParams.get("order")?.toLowerCase());
const dir = SortDirectionSchema.catch("asc").parse(Astro.url.searchParams.get("dir")?.toLowerCase());
const displayFormat = DisplayFormatSchema.catch("image").parse(Astro.url.searchParams.get("as")?.toLowerCase());

//We don't join cards here so that we can show empty sets.
const { setid = "" } = Astro.params;
const set = await db.select().from(Set).where(eq(Set.id, setid)).get();

if(!set) {
    return new Response(null, {
        status: 404,
        statusText: 'Not found'
    });
}

//always order by Card No. as 2nd for consistency within broad orderings.
const orderCols = getOrderConfig(orderConfig.Card, order, dir, Card.cardno);

//Join Set because we need SetName column for CardList.
const cards = await db.select({
        id: Card.id,
        cardno: Card.cardno,
        name: Card.name,
        type: Card.type,
        color: Card.color,
        colorName: Color.name,
        rarity: Card.rarity,
        rarityName: Rarity.name,
        side: Card.side,
        level: Card.level,
        cost: Card.cost,
        power: Card.power,
        soul: Card.soul,
        trigger: Card.trigger,
        traits: Card.traits,
        image: Card.image,
        icons: Card.icons,
        setName: Card.setName,
        releaseDate: Set.releaseDate
    }).from(Card)
    .innerJoin(Set, eq(Set.id, Card.setId)) //needed for release date sorting
    .innerJoin(Rarity, eq(Rarity.id, Card.rarity))
    .innerJoin(Color, eq(Color.id, Card.color))
    .where(eq(Card.setId, set.id))
    .orderBy(...orderCols);

function groupByRarity(cardList: typeof cards) {
    return Object.entries(Object.groupBy(cardList, card => card.rarityName ?? card.rarity));
}

---
<MainLayout title={set.name}>
    <SearchHeader searchText={"set:" + set.id} />
    <div class="set-header">
        <div class="inner-flex">
          <div class="set-header-title">
              <h1>{set.name}</h1>        
              <p>{set.type ?? "Unknown Type"} &mdash; {cards.length}&nbsp;cards</p>
              <p>{set.releaseDate ? `Released&nbsp;${formatDate(set.releaseDate)}` : "Unknown release date"}</p>
          </div>

          <DisplayOptions {displayFormat} {order} {dir} />
      
        </div>
    </div>
    <main>
        {() => {
            if(!cards?.length) {
                return <div class="no-items">This set has no cards.</div>;
            }
            else if(displayFormat == "list") {
                return <CardList cards={cards as ListCardModel[]} />;
            }
            else if(displayFormat == "image" && order != "rarity") {
                return <CardGrid cards={cards as GridCardModel[]} />;
            }
            else {
                return groupByRarity(cards).map(([rarity, grpCards]) => 
                    <Fragment>
                        <div class="set-section-header">
                            <h2>{rarity}</h2>
                            <hr/>
                        </div>
                        <CardGrid cards={grpCards as GridCardModel[]} />
                    </Fragment>
                );
            }
        }}
    </main>
</MainLayout>

<style>
    .set-header {
        background-color: #e0c5a3;
        padding: 4px 2% 4px 2%;
    }

    .set-header .inner-flex {
        flex-flow: row wrap;
        justify-content: space-between;
        align-items: center;
    }

    .set-header-title h1 {
        margin: 0;
        font-size: 18px;
        font-weight: bold;
    }

    .set-header-title p {
        margin: 2px 0 0 0;
        font-size: 13px;
        color:#333;
    }

    .set-section-header {
        display: block;
        max-width: 1000px;
        padding: 0 2.5%;
        margin: 0 auto;
        font-size: 14px;
        font-weight: 500;

        & h2 {
            margin: 16px 0 0 0;
            text-align: center;
        }

        & hr {
            margin: 0;
        }
    }

    @media screen and (min-width: 800px) {
        .set-header-controls {
            display: flex;
            flex-flow: row wrap;
            align-items: center;
            justify-content: center;
            margin: 6px 0 6px 0;
        }
    }

    .no-items {
        display: block;
        max-width: 1000px;
        color: #333;
    }
</style>